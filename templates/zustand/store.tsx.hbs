"use client";

import { createContext, PropsWithChildren, useContext, useRef } from "react";
import { createStore, useStore } from "zustand";
import { devtools } from "zustand/middleware";
import { immer} from "zustand/middleware/immer";

type {{ pascalCase name }}StateConfig = {
  user: { 
    id: string;
  }
};

type {{ pascalCase name }}Actions = {
  actions: {
    onTest: () => void;
  };
};

type {{ pascalCase name }}Store = {{ pascalCase name }}StateConfig & {{ pascalCase name }}Actions;

const middlewares = (f: (...args: any) => {{ pascalCase name }}Store) =>
  devtools(immer(f), { name: "{{ pascalCase name }}Store" });

export const create{{ pascalCase name }}Store = () => {
  return createStore(
    middlewares((set) => ({
      user: {
        id: "",
      },
      actions: {
        onTest() {
          set((state: {{ pascalCase name}}Store) => {
            state.user.id = "test"
          },
            undefined,
            { type: "{{ camelCase name }}/onTest" },
          );
        },
      },
    })),
  );
};

type StoreApi = ReturnType<typeof create{{ pascalCase name }}Store>;

const {{ pascalCase name }}Context = createContext<StoreApi>(undefined as any);

type Props = Required<PropsWithChildren>;

export const {{ pascalCase name }}Provider = ({ children }: Props) => {
  const storeRef = useRef<StoreApi>(undefined as any);

  if (!storeRef.current) {
    storeRef.current = create{{ pascalCase name }}Store();
  }

  return (
    <{{ pascalCase name }}Context.Provider value={storeRef.current}>{children}</{{ pascalCase name }}Context.Provider>
  );
};

export const use{{ pascalCase name }}Selector = <T,>(selector: (store: {{ pascalCase name }}Store) => T): T => {
  const context = useContext({{ pascalCase name }}Context);

  if (!context) {
    throw new Error(`use{{ pascalCase name }}Selector must be used within {{ pascalCase name }}Context`);
  }

  return useStore(context, selector as any);
};
